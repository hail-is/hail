apiVersion: apps/v1
kind: Deployment
metadata:
  name: query
  labels:
    app: query
    hail.is/sha: "{{ code.sha }}"
spec:
  selector:
    matchLabels:
      app: query
  replicas: 1
  template:
    metadata:
      labels:
        app: query
        hail.is/sha: "{{ code.sha }}"
        grafanak8sapp: "true"
    spec:
      # This does not actually work. Java dies immediately and python gets stuck waiting for java
      # to come back
      # terminationGracePeriodSeconds: 28800  # 8 hours
      serviceAccountName: query
{% if deploy %}
      priorityClassName: production
{% endif %}
      containers:
        - name: query-python
          image: "{{ query_image.image }}"
          command:
{% if not deploy %}
           - /controller.sh
{% endif %}
           - python3
           - -m
           - query
          env:
           - name: HAIL_DOMAIN
             value: "{{ global.domain }}"
           - name: HAIL_DEPLOY_CONFIG_FILE
             value: /deploy-config/deploy-config.json
           - name: HAIL_DEFAULT_NAMESPACE
             value: "{{ default_ns.name }}"
           - name: HAIL_SHA
             value: "{{ code.sha }}"
           - name: HAIL_QUERY_WORKER_IMAGE
             value: {{ query_image.image }}
          ports:
           - containerPort: 5000
          volumeMounts:
           - name: deploy-config
             mountPath: /deploy-config
             readOnly: true
           - name: session-secret-key
             mountPath: /session-secret-key
             readOnly: true
           - name: ssl-config
             mountPath: /ssl-config
             readOnly: true
           - name: unix-domain-socket
             mountPath: /sock
          resources:
            requests:
              cpu: "300m"
              memory: "1G"
            limits:
              memory: "7.5G"
          readinessProbe:
            tcpSocket:
              port: 5000
            initialDelaySeconds: 5
            periodSeconds: 5
        - name: query-scala
          image: "{{ query_image.image }}"
          command:
{% if not deploy %}
           - /controller.sh
{% endif %}
           - java
           - -XX:ErrorFile=hs_err.log
           - '-XX:OnError=cat hs_err.log >&2'
           - -Dlog4j.configuration=file:/log4j.properties
           - -cp
           - /hail.jar:/usr/local/lib/python3.7/dist-packages/pyspark/jars/*
           - is.hail.backend.service.ServiceBackendMain
           - /sock/sock
          env:
           - name: HAIL_DOMAIN
             value: "{{ global.domain }}"
           - name: HAIL_DEPLOY_CONFIG_FILE
             value: /deploy-config/deploy-config.json
           - name: HAIL_DEFAULT_NAMESPACE
             value: "{{ default_ns.name }}"
           - name: HAIL_SHA
             value: "{{ code.sha }}"
           - name: HAIL_QUERY_WORKER_IMAGE
             value: {{ query_image.image }}
{% if deploy %}
           - name: HAIL_QUERY_GCS_PATH
             valueFrom:
               secretKeyRef:
                 name: global-config
                 key: hail_query_gcs_path
{% else %}
           - name: HAIL_QUERY_GCS_PATH
             value: gs://hail-test-dmk9z/{{ upload_query_jar.token }}
{% endif %}
          ports:
           - containerPort: 5000
          volumeMounts:
           - name: deploy-config
             mountPath: /deploy-config
             readOnly: true
           - name: session-secret-key
             mountPath: /session-secret-key
             readOnly: true
           - name: ssl-config
             mountPath: /ssl-config
             readOnly: true
           - name: unix-domain-socket
             mountPath: /sock
          resources:
            requests:
              cpu: "300m"
              memory: "1G"
            limits:
              cpu: "1"
              memory: "2.5G"
      volumes:
       - name: unix-domain-socket
         emptyDir: {}
       - name: deploy-config
         secret:
           secretName: deploy-config
       - name: session-secret-key
         secret:
           secretName: session-secret-key
       - name: ssl-config
         secret:
           optional: false
           secretName: ssl-config-query
---
apiVersion: v1
kind: Service
metadata:
  name: query
  labels:
    app: query
spec:
  ports:
  - name: query
    port: 443
    protocol: TCP
    targetPort: 5000
  selector:
    app: query
