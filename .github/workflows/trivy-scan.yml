name: Trivy Security Scan

permissions:
  security-events: write
  id-token: write
  contents: read

on:
  workflow_dispatch:
    inputs:
      images:
        description: 'Comma-separated list of image names to scan (from Google Artifact Registry)'
        required: true
        type: string
      branch:
        description: 'Branch name to upload results against'
        required: true
        type: string
      commit_hash:
        description: 'Commit hash to upload results against'
        required: true
        type: string
      google_project_id:
        description: 'Google Cloud Project ID. Must be configured with Workload Identity Federation to accept auth from this repository ID. Discover by running `gcloud projects describe <project> --format="value(projectNumber)"`'
        required: true
        type: string
      google_service_account:
        description: 'Google Cloud service account name. Must be configured with Workload Identity Federation in the project.'
        required: true
        type: string

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - id: set-matrix
        run: |
          # Convert comma-separated list to JSON array
          images=$(echo '${{ github.event.inputs.images }}' | jq -R -s -c 'split(",")|map(select(length>0)|gsub("\\n";""))')
          echo "matrix=${images}" >> $GITHUB_OUTPUT

  scan:
    needs: prepare
    name: Trivy Security Scan
    runs-on: ubuntu-latest
    permissions:
      security-events: write
    strategy:
      matrix:
        image: ${{ fromJson(needs.prepare.outputs.matrix) }}
      
    steps:
      - name: Set up Google Cloud Auth
        uses: google-github-actions/auth@v2
        with:
          # Use secret instead of workload identity federation:
          credentials_json: ${{ secrets.GOOGLE_GAR_CREDENTIALS }}
          # workload_identity_provider: "projects/${{ github.event.inputs.google_project_id }}/locations/global/workloadIdentityPools/github-pool/providers/github-provider"
          # service_account: "${{ github.event.inputs.google_service_account }}"
          
      - name: Configure Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
          
      - name: Configure Docker for GAR
        run: |
          gcloud auth configure-docker

      - name: Verify authentication
        run: gcloud auth list

      - name: Create results directory
        run: mkdir -p trivy-results
          
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.18.0
        with:
          image-ref: ${{ matrix.image }}
          format: 'sarif'
          output: 'trivy-results/scan.sarif'

      - name: Generate human-readable report
        uses: aquasecurity/trivy-action@0.18.0
        with:
          image-ref: ${{ matrix.image }}
          format: 'table'
          output: 'trivy-results/scan.txt'

      - name: Add image information to SARIF
        run: |
          jq --arg img "${{ matrix.image }}" '
            .runs[].results[] |= (
              if .properties then
                .properties += {"image": $img}
              else
                . += {"properties": {"image": $img}}
              end
            )
          ' trivy-results/scan.sarif > trivy-results/scan.tmp.sarif \
          && mv trivy-results/scan.tmp.sarif trivy-results/scan.sarif

      - name: Generate safe artifact name
        id: safe-name
        run: |
          SAFE_NAME=$(echo "${{ matrix.image }}" | tr ':/' '__')
          echo "name=trivy-scan-${SAFE_NAME}" >> $GITHUB_OUTPUT

      - name: Upload scan results
        uses: actions/upload-artifact@v4
        with:
          name: trivy-scan-${{ steps.safe-name.outputs.name }}
          path: trivy-results/

      - name: Upload SARIF to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-results/scan.sarif
          category: trivy-container-scan
          ref: ${{ github.event.inputs.branch }}
          commit: ${{ github.event.inputs.commit_hash }} 