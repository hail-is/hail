name: AppSec Approval Check

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review, labeled]

jobs:
  check-appsec-approval:
    name: Check AppSec Team Approval
    runs-on: ubuntu-latest
    
    steps:
      - name: Remove hook label
        if: github.event.label.name == 'needs-appsec-review-checker'
        run: |
          gh pr edit ${{ github.event.pull_request.number }} --remove-label "needs-appsec-review-checker"

      - name: Check secrets
        id: check-secrets
        env:
          APP_ID: ${{ secrets.APPSEC_REVIEW_APP_APP_ID }}
          PRIVATE_KEY: ${{ secrets.APPSEC_REVIEW_APP_PRIVATE_KEY }}
          INSTALLATION_ID: ${{ secrets.APPSEC_REVIEW_APP_INSTALLATION_ID }}
        
        run: |
          if [ -z "$APP_ID" ]; then
            ERRORS="APPSEC_REVIEW_APP_APP_ID is not set. $ERRORS"
          fi

          if [ -z "$PRIVATE_KEY" ]; then
            ERRORS="APPSEC_REVIEW_APP_PRIVATE_KEY is not set. $ERRORS"
          fi

          if [ -z "$INSTALLATION_ID" ]; then
            ERRORS="APPSEC_REVIEW_APP_INSTALLATION_ID is not set. $ERRORS"
          fi

          if [ -n "$ERRORS" ]; then
            echo "Errors: $ERRORS"
            exit 1
          fi

          echo "All secrets are set"

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Needed to get all history for changed files check

      - name: Generate installation token
        id: generate-token
        env:
          APP_ID: ${{ secrets.APPSEC_REVIEW_APP_APP_ID }}
          PRIVATE_KEY: ${{ secrets.APPSEC_REVIEW_APP_PRIVATE_KEY }}
          INSTALLATION_ID: ${{ secrets.APPSEC_REVIEW_APP_INSTALLATION_ID }}
        run: |
          # Exit on error
          set -e 

          # Install required npm package
          npm install @octokit/auth-app

          # Create a Node.js script to generate the token
          cat > generate-token.js << 'EOF'
          const { createAppAuth } = require('@octokit/auth-app');
          
          async function getToken() {
            const auth = createAppAuth({
              appId: process.env.APP_ID,
              privateKey: process.env.PRIVATE_KEY,
              installationId: process.env.INSTALLATION_ID
            });
            
            const { token } = await auth({ type: "installation" });
            console.log(token);
          }
          
          getToken().catch(console.error);
          EOF

          # Run the script to get the token
          TOKEN=$(node generate-token.js)

          echo "token=$TOKEN" >> $GITHUB_OUTPUT

      - name: Check for changes in sensitive directories
        id: check-changes
        run: |
          # Exit on error
          set -e 

          # Get the base branch (usually main/master)
          BASE_SHA=${{ github.event.pull_request.base.sha }}
          HEAD_SHA=${{ github.event.pull_request.head.sha }}
          
          # Check for changes in specified directories
          CHANGED_FILES=$(git diff --name-only $BASE_SHA $HEAD_SHA)
          SENSITIVE_CHANGES=false
          
          # List of sensitive directories to check
          SENSITIVE_DIRS=(
            ".github/"
            "batch/"
            "ci/"
            "auth/"
            "gear/"
            "gateway/"
            "grafana/"
            "guide/"
            "infra/"
            "internal-gateway/"
            "letsencrypt/"
            "monitoring/"
            "prometheus/"
            "tls/"
            "ukbb-rg/"
            "web_common/"
            "website/"
          )
          
          for FILE in $CHANGED_FILES; do
            for DIR in "${SENSITIVE_DIRS[@]}"; do
              if [[ $FILE == $DIR* ]]; then
                SENSITIVE_CHANGES=true
                echo "Found changes in sensitive directory: $DIR"
                break 2
              fi
            done
          done
          
          echo "sensitive-changes=$SENSITIVE_CHANGES" >> $GITHUB_OUTPUT

      - name: Check AppSec team approval
        if: steps.check-changes.outputs.sensitive-changes == 'true'
        env:
          GH_TOKEN: ${{ steps.generate-token.outputs.token }}
        id: check-approval
        run: |
          # Exit on error
          set -e 

          # Get the PR reviews
          REVIEWS=$(gh api \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            /repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/reviews)

          REVIEWERS_APPROVING=$(echo "$REVIEWS" | jq -r '.[] | select(.state=="APPROVED") | .user.login')

          echo "DEBUG: Reviewers approving: $REVIEWERS_APPROVING"
          
          # Check if any member of the appsec team has approved
          APPROVED=false
          
          # Get the list of members in the appsec team
          TEAM_MEMBERS=$(gh api \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            /orgs/hail-is/teams/appsec/members | jq -r '.[].login')
          
          # Check if any team member has approved
          for REVIEWER in $REVIEWERS_APPROVING; do
            if echo "$TEAM_MEMBERS" | grep -q "^${REVIEWER}$"; then
              APPROVED=true
              echo "Found approval from AppSec team member $REVIEWER"
              break
            fi
          done
          
          if [ "$APPROVED" = "true" ]; then
            echo "AppSec team approval found"
            exit 0
          else
            echo "No AppSec team approval found yet"
            exit 1
          fi

      - name: Request AppSec team review if needed
        if: steps.check-changes.outputs.sensitive-changes == 'true' && !success()
        env:
          GH_TOKEN: ${{ steps.generate-token.outputs.token }}
        id: request-review
        run: |
          # Exit on error
          set -e 

          # Check if review was already requested
          REQUESTED_REVIEWERS=$(gh api \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            /repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/requested_reviewers)
          
          # Check if appsec team is already requested
          TEAM_ALREADY_REQUESTED=$(echo "$REQUESTED_REVIEWERS" | jq -r '.teams[] | select(.slug=="appsec") | .slug')
          
          echo "DEBUG: Team already requested: $TEAM_ALREADY_REQUESTED"

          if [ -z "$TEAM_ALREADY_REQUESTED" ]; then
            echo "Requesting review from AppSec team..."
            gh pr edit ${{ github.event.pull_request.number }} --add-reviewer "hail-is/appsec"
          else
            echo "Review from AppSec team already requested"
          fi
