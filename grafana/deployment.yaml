apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-envoy-sidecar-config
data:
  envoy.yaml: |
    static_resources:
      listeners:
      - address:
          socket_address:
            address: 0.0.0.0
            port_value: 8443
        filter_chains:
        - filters:
          - name: envoy.filters.network.http_connection_manager
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
              codec_type: AUTO
              stat_prefix: ingress_http
              upgrade_configs:
                - upgrade_type: websocket
              use_remote_address: true
              skip_xff_append: false
              route_config:
                name: local_route
                virtual_hosts:
                  - name: grafana
                    domains: ["*"]
                    routes:
                      - match:
                          prefix: "/"
                        route:
                          timeout: 0s
                          cluster: grafana
              http_filters:
                - name: envoy.filters.http.ext_authz
                  typed_config:
                    "@type": type.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthz
                    status_on_error:
                      code: 503
                    http_service:
                      server_uri:
                        uri: https://auth:443
                        cluster: auth
                        timeout: 0.25s
{% if deploy %}
                      # Envoy will append the user-requested path to the end of the path_prefix
                      # so this sets a query param with the user-requested path instead of
                      # messing with the authorization route for auth
                      # e.g. /api/v1alpha/verify_dev_credentials?url=/freeze
                      path_prefix: /api/v1alpha/verify_dev_credentials?url=
{% else %}
                      path_prefix: /{{ default_ns.name }}/auth/api/v1alpha/verify_dev_credentials?url=
{% endif %}
                      authorization_request:
                        allowed_headers:
                          patterns:
                            exact: "Cookie"
                            ignore_case: true
                - name: envoy.filters.http.router
                  typed_config:
                    "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
          transport_socket:
            name: envoy.transport_sockets.tls
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.DownstreamTlsContext
              common_tls_context:
                tls_certificates:
                - certificate_chain:
                    filename: /ssl-config/grafana-cert.pem
                  private_key:
                    filename: /ssl-config/grafana-key.pem
      clusters:
      - name: auth
        type: STRICT_DNS
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: auth
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: auth
                    port_value: 443
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
            common_tls_context:
              tls_certificates:
              - certificate_chain:
                  filename: /ssl-config/grafana-cert.pem
                private_key:
                  filename: /ssl-config/grafana-key.pem
              validation_context:
                trusted_ca:
                  filename: /ssl-config/grafana-outgoing.pem
      - name: grafana
        type: STRICT_DNS
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: grafana
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: 127.0.0.1
                    port_value: 3000
    admin:
      address:
        socket_address:
          address: 127.0.0.1
          port_value: 8001
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: grafana
  labels:
    app: grafana
  annotations:
    "cluster-autoscaler.kubernetes.io/safe-to-evict": "true"
spec:
  selector:
    matchLabels:
      app: grafana
  serviceName: "grafana"
  replicas: 1
  template:
    metadata:
      labels:
        app: grafana
    spec:
      priorityClassName: infrastructure
      securityContext:
        fsGroup: 472
      volumes:
        - name: grafana-configmap-volume
          configMap:
            name: grafana-config
        - name: grafana-datasources-configmap-volume
          configMap:
            name: grafana-datasources-config
        - name: ssl-config-grafana
          secret:
            optional: false
            secretName: ssl-config-grafana
        - name: grafana-tokens
          secret:
            secretName: grafana-tokens
        - name: grafana-shared
          emptyDir: {}
        - name: grafana-envoy-sidecar-config
          configMap:
            name: grafana-envoy-sidecar-config
        - name: grafana-gsa-key
          secret:
            secretName: grafana-gsa-key
      initContainers:
       - name: setup-tokens
         image: {{ hail_ubuntu_image.image }}
         command: ["/bin/bash"]
         args: ["-c", "jq -r '.{{ default_ns.name }}' /grafana-tokens/tokens.json > /grafana-shared/token"]
         volumeMounts:
           - mountPath: /grafana-tokens
             name: grafana-tokens
           - mountPath: /grafana-shared
             name: grafana-shared
       - name: setup-grafana-gsa-key
         image: {{ hail_ubuntu_image.image }}
         command: ["/bin/bash"]
         args:
           - "-c"
           - |
             jq -r '.tenant' /grafana-gsa-key/key.json > /grafana-shared/tenant-id
             jq -r '.appId' /grafana-gsa-key/key.json > /grafana-shared/app-id
             jq -r '.password' /grafana-gsa-key/key.json > /grafana-shared/client-secret
         volumeMounts:
           - mountPath: /grafana-gsa-key
             name: grafana-gsa-key
           - mountPath: /grafana-shared
             name: grafana-shared
      containers:
       - name: grafana
         image: {{ global.docker_prefix }}/grafana/grafana:9.1.4
         env:
{% if deploy %}
          - name: GF_SERVER_DOMAIN
            value: grafana.{{ global.domain }}
          - name: GF_SERVER_ROOT_URL
            value: "%(protocol)s://%(domain)s/"
{% else %}
          - name: GF_SERVER_DOMAIN
            value: internal.{{ global.domain }}
          - name: GF_SERVER_ROOT_URL
            value: "%(protocol)s://%(domain)s/{{ default_ns.name }}/grafana/"
{% endif %}
{% if global.cloud == 'gcp' %}
          - name: GCP_PROJECT
            valueFrom:
              secretKeyRef:
                name: global-config
                key: gcp_project
{% endif %}
         volumeMounts:
          - mountPath: /var/lib/grafana
            name: grafana-storage
          - mountPath: /etc/grafana
            name: grafana-configmap-volume
          - mountPath: /etc/grafana/provisioning/datasources
            name: grafana-datasources-configmap-volume
          - mountPath: /grafana-shared
            name: grafana-shared
         resources:
           requests:
             cpu: "10m"
             memory: "20M"
           limits:
             cpu: "1"
             memory: "1G"
         ports:
          - containerPort: 3000
       - name: envoy
         image: "{{ global.docker_prefix }}/envoyproxy/envoy:v1.22.3"
         command:
           - /usr/local/bin/envoy
           - --config-path
           - /etc/envoy/envoy.yaml
           - --concurrency
           - "2"
         resources:
           requests:
             cpu: "10m"
             memory: "20M"
           limits:
             cpu: "1"
             memory: "1G"
         ports:
          - containerPort: 8443
         volumeMounts:
          - name: ssl-config-grafana
            mountPath: /ssl-config
            readOnly: true
          - name: grafana-envoy-sidecar-config
            mountPath: /etc/envoy
            readOnly: true
         readinessProbe:
           tcpSocket:
             port: 8443
           initialDelaySeconds: 5
           periodSeconds: 5
  volumeClaimTemplates:
  - metadata:
      name: grafana-storage
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 10Gi
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-config
data:
  grafana.ini: |
    [server]
{% if deploy %}
    domain = grafana.{{ global.domain }}
{% else %}
    domain = internal.{{ global.domain }}
    root_url = %(protocol)s://%(domain)/{{ default_ns.name }}/grafana/
    serve_from_sub_path = true
{% endif %}
    [auth]
    disable_signout_menu = true
    [auth.anonymous]
    enabled = true
    org_name = Main Org.
    org_role = Admin
    [auth.basic]
    enabled = false
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-datasources-config
data:
  datasources.yaml: |
    apiVersion: 1
    datasources:
{% if global.cloud == 'gcp' %}
      - name: Google Cloud Monitoring
        type: stackdriver
        access: proxy
        isDefault: true
        jsonData:
          authenticationType: gce
          defaultProject: $GCP_PROJECT
        editable: true
{% elif global.cloud == "azure" %}
      - name: Azure Monitor
        type: grafana-azure-monitor-datasource
        access: proxy
        jsonData:
          azureAuthType: clientsecret
          cloudName: azuremonitor
          tenantId: $__file{/grafana-shared/tenant-id}
          clientId: $__file{/grafana-shared/app-id}
          subscriptionId: {{ global.azure_subscription_id }}
        secureJsonData:
          clientSecret: $__file{/grafana-shared/client-secret}
        version: 1
{% endif %}
      - name: Prometheus
        type: prometheus
        url: https://prometheus/
        jsonData:
          httpHeaderName1: 'Authorization'
          tlsSkipVerify: true
          tlsAuth: true
          oauthPassThru: true
          keepCookies:
            - {{ global.cloud }}_session
            - {{ global.cloud }}_sesh
        secureJsonData:
          httpHeaderValue1: 'Bearer $__file{/grafana-shared/token}'
        editable: true
        withCredentials: true
---
apiVersion: v1
kind: Service
metadata:
  name: grafana
spec:
  ports:
   - port: 443
     protocol: TCP
     targetPort: 8443
  selector:
    app: grafana
