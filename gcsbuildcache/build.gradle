buildscript {
    repositories {
        mavenCentral()
    }
}

plugins {
    id 'java'
    id 'scala'
    id "com.gradle.plugin-publish" version "1.0.0"
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

group = "is.hail.gcsbuildcache"
version = "0.0.1"

repositories {
    mavenCentral()
}

project.ext {
    scalaVersion = System.getProperty("scala.version", "2.12.15")
}

dependencies {
    implementation(group: 'com.google.cloud', name: 'google-cloud-storage', version: '2.27.1')
    implementation(group: 'org.scala-lang', name: 'scala-library', version: scalaVersion)
    implementation(group: 'org.scala-lang', name: 'scala-reflect', version: scalaVersion)
}

gradlePlugin {
    plugins {
	simplePlugin {
            id = "is.hail.gcsbuildcache"
            implementationClass = "is.hail.gcsbuildcache.GCSBuildCachePlugin"
            displayName = "Hail GCS Build Cache"
        }
    }
}

shadowJar {
    archiveClassifier = ''
}

import java.util.concurrent.TimeUnit
class TimingsListener implements TaskExecutionListener, BuildListener {
    private long startTime
    private timings = []

    @Override
    void beforeExecute(Task task) {
        startTime = System.nanoTime()
    }

    @Override
    void afterExecute(Task task, TaskState taskState) {
        def ms = TimeUnit.MILLISECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS);
        timings.add([ms, task.path])
        task.project.logger.warn "${task.path} took ${ms}ms"
    }

    @Override
    void buildFinished(BuildResult result) {
        println "Task timings:"
        for (timing in timings) {
            if (timing[0] >= 50) {
                printf "%7sms  %s\n", timing
            }
        }
    }

    @Override
    void projectsEvaluated(Gradle gradle) {}

    @Override
    void projectsLoaded(Gradle gradle) {}

    @Override
    void settingsEvaluated(Settings settings) {}
}

gradle.addListener new TimingsListener()
