apiVersion: v1
kind: ConfigMap
metadata:
  name: tls-sidecar-envoy-config
data:
  envoy.yaml: |
    static_resources:
      listeners:
      - address:
          socket_address:
            address: 0.0.0.0
            port_value: 443
        filter_chains:
        - filters:
          - name: envoy.filters.network.http_connection_manager
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
              codec_type: AUTO
              stat_prefix: ingress_http
              access_log:
                name: json_error_access_log
                filter:
                  status_code_filter:
                    comparison:
                      op: GE  # >=
                      value:
                        default_value: 400
                        runtime_key: "min_log_status_code"
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.access_loggers.stream.v3.StdoutAccessLog
                  log_format:
                    json_format:
                      message: "%LOCAL_REPLY_BODY%"
                      status: "%RESPONSE_CODE%"
                      duration: "%DURATION%"
                      host: "%REQ(:AUTHORITY)%"
                      path: "%REQ(X-ENVOY-ORIGINAL-PATH?:PATH)%"
                      upstream_address: "%UPSTREAM_HOST%"
                      remote_address: "%DOWNSTREAM_REMOTE_ADDRESS%"
                      x_real_ip: "%REQ(X-Real-IP)%"
                      request_start_time: "%START_TIME%"
                      bytes_sent: "%BYTES_SENT%"
                      http_referer: "%REQ(Referer)%"
                      http_user_agent: "%REQ(User-Agent)%"
              route_config:
                name: local_route
                virtual_hosts:
                  - name: batch-driver
                    domains: ["*"]
                    routes:
                      - match:
                          prefix: "/"
                        route:
                          timeout: 0s
                          cluster: batch-driver
              http_filters:
                - name: envoy.filters.http.router
                  typed_config:
                    "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
          transport_socket:
            name: envoy.transport_sockets.tls
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.DownstreamTlsContext
              common_tls_context:
                tls_certificates:
                - certificate_chain:
                    filename: /ssl-config/batch-driver-nginx-cert.pem
                  private_key:
                    filename: /ssl-config/batch-driver-nginx-key.pem
      clusters:
      - name: batch-driver
        type: STRICT_DNS
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: batch-driver
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: 127.0.0.1
                    port_value: 5000
    admin:
      address:
        socket_address:
          address: 127.0.0.1
          port_value: 8001
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: batch-driver
  labels:
    app: batch-driver
    hail.is/sha: "{{ code.sha }}"
spec:
  selector:
    matchLabels:
      app: batch-driver
  replicas: 1
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: batch-driver
        hail.is/sha: "{{ code.sha }}"
        grafanak8sapp: "true"
      annotations:
        kubectl.kubernetes.io/default-container: batch-driver
    spec:
      serviceAccountName: batch
{% if deploy %}
      priorityClassName: production
      nodeSelector:
        preemptible: "false"
{% else %}
      nodeSelector:
        preemptible: "true"
      tolerations:
       - key: preemptible
         value: "true"
       - key: "kubernetes.azure.com/scalesetpriority"
         value: "spot"
{% endif %}
      containers:
      - name: envoy
        image: "{{ global.docker_prefix }}/envoyproxy/envoy:v1.22.3"
        command:
          - /usr/local/bin/envoy
          - --config-path
          - /etc/envoy/envoy.yaml
          - --concurrency
          - "2"
        resources:
          requests:
            cpu: "20m"
            memory: "20M"
          limits:
            cpu: "1"
            memory: "1G"
        env:
          - name: ENVOY_UID
            value: "0"
        ports:
         - containerPort: 443
        volumeMounts:
         - name: ssl-config-batch-driver-nginx
           mountPath: /ssl-config
           readOnly: true
         - name: tls-sidecar-envoy-config
           mountPath: /etc/envoy
           readOnly: true
        readinessProbe:
          tcpSocket:
            port: 443
          initialDelaySeconds: 5
          periodSeconds: 5
      - name: batch-driver
        image: {{ batch_image.image }}
        command:
{% if not deploy %}
         - /controller.sh
{% endif %}
         - python3
         - -m
         - batch.driver
        resources:
          requests:
            cpu: "350m"
            memory: "200M"
          limits:
            cpu: "1.5"
            memory: "2.5G"
        env:
         - name: PORT
           value: "5000"
         - name: GOOGLE_APPLICATION_CREDENTIALS
           value: /gsa-key/key.json
         - name: HAIL_DEPLOY_CONFIG_FILE
           value: /deploy-config/deploy-config.json
         - name: HAIL_BATCH_WORKER_IMAGE
           value: "{{ batch_worker_image.image }}"
         - name: HAIL_DEFAULT_NAMESPACE
           value: "{{ default_ns.name }}"
         - name: HAIL_SSH_PUBLIC_KEY
           value: /ssh-public-key/ssh_rsa.pub
         - name: HAIL_DOCKER_ROOT_IMAGE
           valueFrom:
             secretKeyRef:
               name: global-config
               key: docker_root_image
         - name: HAIL_DOCKER_PREFIX
           valueFrom:
             secretKeyRef:
               name: global-config
               key: docker_prefix
         - name: KUBERNETES_SERVER_URL
           valueFrom:
             secretKeyRef:
               name: global-config
               key: kubernetes_server_url
         - name: CLOUD
           valueFrom:
             secretKeyRef:
               name: global-config
               key: cloud
         - name: INTERNAL_GATEWAY_IP
           valueFrom:
             secretKeyRef:
               name: global-config
               key: internal_ip
{% if global.cloud == "azure" %}
         - name: HAIL_AZURE_OAUTH_SCOPE
           valueFrom:
             secretKeyRef:
               name: auth-oauth2-client-secret
               key: sp_oauth_scope
{% endif %}
         - name: HAIL_SHA
           value: "{{ code.sha }}"
{% if scope != "test" %}
         - name: HAIL_SHOULD_PROFILE
           value: "1"
{% endif %}
         - name: HAIL_SCOPE
           value: "{{ scope }}"
{% if deploy %}
         - name: HAIL_BATCH_STORAGE_URI
           valueFrom:
             secretKeyRef:
               name: global-config
               key: batch_logs_storage_uri
{% else %}
         - name: HAIL_BATCH_STORAGE_URI
           valueFrom:
             secretKeyRef:
               name: global-config
               key: test_storage_uri
{% endif %}
{% if deploy %}
         - name: HAIL_QUERY_STORAGE_URI
           valueFrom:
             secretKeyRef:
               name: global-config
               key: query_storage_uri
         - name: HAIL_QUERY_ACCEPTABLE_JAR_SUBFOLDER
           value: "/jars"
{% else %}
         - name: HAIL_QUERY_STORAGE_URI
           valueFrom:
             secretKeyRef:
               name: global-config
               key: test_storage_uri
         - name: HAIL_QUERY_ACCEPTABLE_JAR_SUBFOLDER
           value: "/{{ default_ns.name }}/jars"
{% endif %}
        volumeMounts:
         - name: deploy-config
           mountPath: /deploy-config
           readOnly: true
         - name: global-config
           mountPath: /global-config
           readOnly: true
         - name: session-secret-key
           mountPath: /session-secret-key
           readOnly: true
         - name: sql-config
           mountPath: /sql-config
           readOnly: true
         - name: gsa-key
           mountPath: /gsa-key
           readOnly: true
         - name: ssl-config-batch-driver
           mountPath: /ssl-config
           readOnly: true
         - name: ssh-public-key
           mountPath: /ssh-public-key
           readOnly: true
        readinessProbe:
          tcpSocket:
            port: 5000
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
       - name: deploy-config
         secret:
           secretName: deploy-config
       - name: global-config
         secret:
           secretName: global-config
       - name: session-secret-key
         secret:
           secretName: session-secret-key
       - name: sql-config
         secret:
           secretName: "{{ batch_database.user_secret_name }}"
       - name: gsa-key
         secret:
           secretName: batch-gsa-key
       - name: ssl-config-batch-driver
         secret:
           optional: false
           secretName: ssl-config-batch-driver
       - name: ssl-config-batch-driver-nginx
         secret:
           optional: false
           secretName: ssl-config-batch-driver-nginx
       - name: ssh-public-key
         secret:
           secretName: batch-worker-ssh-public-key
           optional: true
       - name: tls-sidecar-envoy-config
         configMap:
           name: tls-sidecar-envoy-config
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: batch
  labels:
    app: batch
    hail.is/sha: "{{ code.sha }}"
spec:
  selector:
    matchLabels:
      app: batch
  replicas: 5
  template:
    metadata:
      labels:
        app: batch
        hail.is/sha: "{{ code.sha }}"
        grafanak8sapp: "true"
    spec:
{% if deploy %}
      priorityClassName: production
{% endif %}
      nodeSelector:
        preemptible: "true"
      tolerations:
       - key: preemptible
         value: "true"
       - key: "kubernetes.azure.com/scalesetpriority"
         value: "spot"
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: "app"
                    operator: In
                    values:
                    - batch
              topologyKey: "kubernetes.io/hostname"
      containers:
      - name: batch
        image: {{ batch_image.image }}
        command:
{% if not deploy %}
         - /controller.sh
{% endif %}
         - python3
         - -m
         - batch.front_end
        env:
         - name: PORT
           value: "443"
         - name: HAIL_PRODUCTION_DOMAIN
           valueFrom:
             secretKeyRef:
               name: global-config
               key: domain
         - name: HAIL_DEPLOY_CONFIG_FILE
           value: /deploy-config/deploy-config.json
         - name: HAIL_DEFAULT_NAMESPACE
           value: "{{ default_ns.name }}"
         - name: HAIL_DOCKER_ROOT_IMAGE
           valueFrom:
             secretKeyRef:
               name: global-config
               key: docker_root_image
         - name: HAIL_DOCKER_PREFIX
           valueFrom:
             secretKeyRef:
               name: global-config
               key: docker_prefix
         - name: KUBERNETES_SERVER_URL
           valueFrom:
             secretKeyRef:
               name: global-config
               key: kubernetes_server_url
         - name: CLOUD
           valueFrom:
             secretKeyRef:
               name: global-config
               key: cloud
         - name: INTERNAL_GATEWAY_IP
           valueFrom:
             secretKeyRef:
               name: global-config
               key: internal_ip
{% if global.cloud == "gcp" %}
         - name: GOOGLE_APPLICATION_CREDENTIALS
           value: /gsa-key/key.json
         - name: HAIL_IDENTITY_PROVIDER_JSON
           value: '{"idp": "Google"}'
{% else %}
         - name: AZURE_APPLICATION_CREDENTIALS
           value: /gsa-key/key.json
         - name: HAIL_IDENTITY_PROVIDER_JSON
           value: '{"idp": "Microsoft"}'
         - name: HAIL_AZURE_OAUTH_SCOPE
           valueFrom:
             secretKeyRef:
               name: auth-oauth2-client-secret
               key: sp_oauth_scope
{% endif %}
         - name: HAIL_SHA
           value: "{{ code.sha }}"
{% if scope != "test" %}
         - name: HAIL_SHOULD_PROFILE
           value: "1"
{% endif %}
         - name: HAIL_SCOPE
           value: "{{ scope }}"
{% if deploy %}
         - name: HAIL_BATCH_STORAGE_URI
           valueFrom:
             secretKeyRef:
               name: global-config
               key: batch_logs_storage_uri
         - name: STANDING_WORKER_MAX_IDLE_TIME_SECS
           value: "7200" # 2 hours
{% else %}
         - name: HAIL_BATCH_STORAGE_URI
           valueFrom:
             secretKeyRef:
               name: global-config
               key: test_storage_uri
         - name: STANDING_WORKER_MAX_IDLE_TIME_SECS
           value: "300"
{% endif %}
{% if deploy %}
         - name: HAIL_QUERY_STORAGE_URI
           valueFrom:
             secretKeyRef:
               name: global-config
               key: query_storage_uri
         - name: HAIL_QUERY_ACCEPTABLE_JAR_SUBFOLDER
           value: "/jars"
{% else %}
         - name: HAIL_QUERY_STORAGE_URI
           valueFrom:
             secretKeyRef:
               name: global-config
               key: test_storage_uri
         - name: HAIL_QUERY_ACCEPTABLE_JAR_SUBFOLDER
           value: "/{{ default_ns.name }}/jars"
{% endif %}
        ports:
         - containerPort: 443
        resources:
          requests:
            cpu: "100m"
            memory: "200M"
          limits:
            cpu: "1"
            memory: "1G"
        volumeMounts:
         - name: deploy-config
           mountPath: /deploy-config
           readOnly: true
         - name: global-config
           mountPath: /global-config
           readOnly: true
         - name: session-secret-key
           mountPath: /session-secret-key
           readOnly: true
         - name: sql-config
           mountPath: /sql-config
           readOnly: true
         - name: gsa-key
           mountPath: /gsa-key
           readOnly: true
         - name: ssl-config-batch
           mountPath: /ssl-config
           readOnly: true
        readinessProbe:
          tcpSocket:
            port: 443
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
       - name: deploy-config
         secret:
           secretName: deploy-config
       - name: global-config
         secret:
           secretName: global-config
       - name: session-secret-key
         secret:
           secretName: session-secret-key
       - name: sql-config
         secret:
           secretName: "{{ batch_database.user_secret_name }}"
       - name: gsa-key
         secret:
           secretName: batch-gsa-key
       - name: ssl-config-batch
         secret:
           optional: false
           secretName: ssl-config-batch
{% if deploy %}
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: batch
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: batch
  minReplicas: 3
  maxReplicas: 10
  metrics:
   - type: Resource
     resource:
       name: cpu
       target:
         type: Utilization
         averageUtilization: 2500
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: batch
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: batch
{% endif %}
---
apiVersion: v1
kind: Service
metadata:
  name: batch
  labels:
    app: batch
spec:
  clusterIP: None
  selector:
    app: batch
---
apiVersion: v1
kind: Service
metadata:
  name: batch-driver
  labels:
    app: batch-driver
spec:
  clusterIP: None
  selector:
    app: batch-driver
