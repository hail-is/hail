ARG BASE_IMAGE={{ hail_ubuntu_image.image }}
FROM $BASE_IMAGE AS base

# libyajl-dev: crun runtime dependency
RUN hail-apt-get-install \
    iproute2 \
    iptables \
    ca-certificates-java \
    openjdk-8-jre-headless \
    liblapack3 \
    xfsprogs \
    libyajl-dev

RUN update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.9 1

{% if global.cloud == "gcp" %}
RUN echo "APT::Acquire::Retries \"5\";" > /etc/apt/apt.conf.d/80-retries && \
    hail-apt-get-install curl gnupg && \
    export GCSFUSE_REPO=gcsfuse-jammy && \
    echo "deb https://packages.cloud.google.com/apt $GCSFUSE_REPO main" | tee /etc/apt/sources.list.d/gcsfuse.list && \
    curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add - && \
    hail-apt-get-install fuse gcsfuse=1.2.0

RUN curl -fsSL https://nvidia.github.io/libnvidia-container/gpgkey | gpg --dearmor -o /usr/share/keyrings/nvidia-container-toolkit-keyring.gpg && \
    curl -s -L https://nvidia.github.io/libnvidia-container/ubuntu22.04/libnvidia-container.list | \
    sed 's#deb https://#deb [signed-by=/usr/share/keyrings/nvidia-container-toolkit-keyring.gpg] https://#g' | \
    tee /etc/apt/sources.list.d/nvidia-container-toolkit.list

RUN apt-get update && \
    hail-apt-get-install nvidia-container-toolkit

{% elif global.cloud == "azure" %}
RUN apt-get update && \
    hail-apt-get-install libreadline8

# https://github.com/Azure/azure-storage-fuse/issues/603
RUN hail-apt-get-install ca-certificates pkg-config libfuse-dev cmake libcurl4-gnutls-dev libgnutls28-dev uuid-dev libgcrypt20-dev && \
    curl -LO https://packages.microsoft.com/config/ubuntu/22.04/packages-microsoft-prod.deb && \
    dpkg -i packages-microsoft-prod.deb && \
    apt-get update && \
    hail-apt-get-install blobfuse2

{% else %}
RUN echo "!!! UNEXPECTED CLOUD {{global.cloud}} !!!" && exit 1
{% endif %}

COPY hail/python/hailtop/pinned-requirements.txt hailtop-requirements.txt
COPY gear/pinned-requirements.txt gear-requirements.txt
COPY batch/pinned-requirements.txt batch-requirements.txt
RUN hail-pip-install \
    -r hailtop-requirements.txt \
    -r gear-requirements.txt \
    -r batch-requirements.txt \
    pyspark==3.3.2

ENV SPARK_HOME /usr/local/lib/python3.9/dist-packages/pyspark
ENV PATH "$PATH:$SPARK_HOME/sbin:$SPARK_HOME/bin"
ENV PYSPARK_PYTHON python3

COPY docker/core-site.xml ${SPARK_HOME}/conf/core-site.xml

RUN curl -L https://github.com/jvm-profiling-tools/async-profiler/releases/download/v2.9/async-profiler-2.9-linux-x64.tar.gz | tar -zxvf -

# Build crun in separate build step
FROM base AS crun_builder
RUN hail-apt-get-install make git gcc build-essential pkgconf libtool \
   libsystemd-dev libcap-dev libseccomp-dev \
   go-md2man libtool autoconf automake
RUN git clone --depth 1 --branch 1.4.4 https://github.com/containers/crun.git && \
   cd crun && \
   ./autogen.sh && \
   ./configure && \
   make && \
   make install

FROM base
COPY --from=crun_builder /usr/local/bin/crun /usr/local/bin/crun
COPY hail/python/setup-hailtop.py /hailtop/setup.py
COPY hail/python/MANIFEST.in /hailtop/MANIFEST.in
COPY hail/python/hailtop /hailtop/hailtop/

COPY gear/setup.py /gear/setup.py
COPY gear/gear /gear/gear/

COPY batch/setup.py batch/MANIFEST.in /batch/
COPY batch/batch /batch/batch/

RUN hail-pip-install /hailtop /gear /batch

COPY batch/jvm-entryway/build/libs/jvm-entryway.jar /jvm-entryway/
COPY letsencrypt/subdomains.txt /
