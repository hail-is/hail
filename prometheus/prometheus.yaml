---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus
  namespace: {{ default_ns.name }}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: prometheus
  namespace: {{ default_ns.name }}
rules:
 - apiGroups: [""]
   resources:
    - nodes
    - nodes/proxy
    - services
    - endpoints
    - pods
   verbs: ["get", "list", "watch"]
 - apiGroups:
    - extensions
   resources:
    - ingresses
   verbs: ["get", "list", "watch"]
 - nonResourceURLs: ["/metrics"]
   verbs: ["get"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prometheus
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus
subjects:
 - kind: ServiceAccount
   name: prometheus
   namespace: {{ default_ns.name }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: etc-prometheus
  namespace: {{ default_ns.name }}
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
    scrape_configs:
     - job_name: "kubernetes-kubelet"
       scheme: https
       tls_config:
         ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
         insecure_skip_verify: true
       bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
       kubernetes_sd_configs:
        - role: node
       relabel_configs:
        - action: labelmap
          regex: __meta_kubernetes_node_label_(.+)
        - target_label: __address__
          replacement: kubernetes.default.svc.cluster.local:443
        - source_labels: [__meta_kubernetes_node_name]
          regex: (.+)
          target_label: __metrics_path__
          replacement: /api/v1/nodes/${1}/proxy/metrics
     - job_name: "kubernetes-cadvisor"
       scheme: https
       tls_config:
         ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
         insecure_skip_verify: true
       bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
       kubernetes_sd_configs:
        - role: node
       relabel_configs:
        - action: labelmap
          regex: __meta_kubernetes_node_label_(.+)
        - target_label: __address__
          replacement: kubernetes.default.svc.cluster.local:443
        - source_labels: [__meta_kubernetes_node_name]
          regex: (.+)
          target_label: __metrics_path__
          replacement: /api/v1/nodes/${1}/proxy/metrics/cadvisor
     - job_name: "kubernetes-apiservers"
       scheme: https
       tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          insecure_skip_verify: true
       bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
       kubernetes_sd_configs:
        - api_server: null
          role: endpoints
          namespaces:
            names: []
       relabel_configs:
       - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
         separator: ;
         regex: default;kubernetes;https
         replacement: $1
         action: keep
     - job_name: "kubernetes-pods"
       scheme: https
       tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          insecure_skip_verify: true
       bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
       kubernetes_sd_configs:
        - role: pod
       relabel_configs:
       - source_labels: [__meta_kubernetes_pod_label_grafanak8sapp]
         action: keep
         regex: true
       - action: labelmap
         regex: __meta_kubernetes_pod_label_(.+)
       - source_labels: [__meta_kubernetes_namespace]
         action: replace
         target_label: kubernetes_namespace
       - source_labels: [__meta_kubernetes_pod_name]
         action: replace
         target_label: kubernetes_pod_name
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    name: prometheus
  name: prometheus
  namespace: {{ default_ns.name }}
spec:
  serviceName: "prometheus"
  selector:
    matchLabels:
      app: prometheus
  replicas: 1
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      priorityClassName: infrastructure
      serviceAccountName: prometheus
{% if deploy %}
      nodeSelector:
        preemptible: "false"
{% else %}
      nodeSelector:
        preemptible: "true"
{% endif %}
      securityContext:
        fsGroup: 65534
      containers:
       - name: prometheus
         image: prom/prometheus:v2.19.2
         imagePullPolicy: Always
         command:
          - "/bin/prometheus"
          - "--config.file=/etc/prometheus/prometheus.yml"
          - "--storage.tsdb.path=/prometheus"
          - "--storage.tsdb.retention.time=45d"
          - "--web.console.libraries=/usr/share/prometheus/console_libraries"
          - "--web.console.templates=/usr/share/prometheus/consoles"
          - "--web.enable-lifecycle"
{% if deploy %}
          - "--web.external-url=https://prometheus.hail.is/"
          - "--web.route-prefix=/"
{% else %}
          - "--web.external-url=https://internal.hail.is/{{ default_ns.name }}/prometheus/"
          - "--web.route-prefix=/{{ default_ns.name }}/prometheus/"
{% endif %}
         ports:
          - containerPort: 9090
            protocol: TCP
         volumeMounts:
          - mountPath: "/etc/prometheus"
            name: etc-prometheus
          - mountPath: "/prometheus"
            name: prometheus-storage
         resources:
           requests:
             cpu: "1"
             memory: 5G
           limits:
             cpu: "1"
             memory: 10G
       - name: nginx
         image: {{ prom_nginx_image.image }}
         resources:
           requests:
             cpu: "20m"
             memory: "20M"
           limits:
             cpu: "1"
             memory: "1G"
         ports:
          - containerPort: 443
         volumeMounts:
          - name: ssl-config-prometheus
            mountPath: /ssl-config
            readOnly: true
         readinessProbe:
           tcpSocket:
             port: 443
           initialDelaySeconds: 5
           periodSeconds: 5
      volumes:
       - name: etc-prometheus
         configMap:
           name: etc-prometheus
       - name: ssl-config-prometheus
         secret:
           optional: false
           secretName: ssl-config-prometheus
  volumeClaimTemplates:
    - metadata:
        name: prometheus-storage
        namespace: {{ default_ns.name }}
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 150Gi
---
apiVersion: v1
kind: Service
metadata:
  name: prometheus
spec:
  ports:
   - port: 443
     protocol: TCP
     targetPort: 443
  selector:
    app: prometheus
