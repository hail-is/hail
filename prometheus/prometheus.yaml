apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-envoy-sidecar-config
data:
  envoy.yaml: |
    static_resources:
      listeners:
      - address:
          socket_address:
            address: 0.0.0.0
            port_value: 8443
        filter_chains:
        - filters:
          - name: envoy.filters.network.http_connection_manager
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
              codec_type: AUTO
              stat_prefix: ingress_http
              upgrade_configs:
                - upgrade_type: websocket
              use_remote_address: true
              skip_xff_append: false
              route_config:
                name: local_route
                virtual_hosts:
                  - name: prometheus
                    domains: ["*"]
                    routes:
                      - match:
                          prefix: "/"
                        route:
                          timeout: 0s
                          cluster: prometheus
              http_filters:
                - name: envoy.filters.http.ext_authz
                  typed_config:
                    "@type": type.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthz
                    status_on_error:
                      code: 503
                    http_service:
                      server_uri:
                        uri: https://auth:443
                        cluster: auth
                        timeout: 0.25s
{% if deploy %}
                      # Envoy will append the user-requested path to the end of the path_prefix
                      # so this sets a query param with the user-requested path instead of
                      # messing with the authorization route for auth
                      # e.g. /api/v1alpha/verify_dev_credentials?url=/freeze
                      path_prefix: /api/v1alpha/verify_dev_or_sa_credentials?url=
{% else %}
                      path_prefix: /{{ default_ns.name }}/auth/api/v1alpha/verify_dev_or_sa_credentials?url=
{% endif %}
                      authorization_request:
                        allowed_headers:
                          patterns:
                            exact: "Cookie"
                            ignore_case: true
                - name: envoy.filters.http.router
                  typed_config:
                    "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
          transport_socket:
            name: envoy.transport_sockets.tls
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.DownstreamTlsContext
              common_tls_context:
                tls_certificates:
                - certificate_chain:
                    filename: /ssl-config/prometheus-cert.pem
                  private_key:
                    filename: /ssl-config/prometheus-key.pem
      clusters:
      - name: auth
        type: STRICT_DNS
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: auth
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: auth
                    port_value: 443
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
            common_tls_context:
              tls_certificates:
              - certificate_chain:
                  filename: /ssl-config/prometheus-cert.pem
                private_key:
                  filename: /ssl-config/prometheus-key.pem
              validation_context:
                trusted_ca:
                  filename: /ssl-config/prometheus-outgoing.pem
      - name: prometheus
        type: STRICT_DNS
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: prometheus
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: 127.0.0.1
                    port_value: 9090
    admin:
      address:
        socket_address:
          address: 127.0.0.1
          port_value: 8001
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus
  namespace: {{ default_ns.name }}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: prometheus
  namespace: {{ default_ns.name }}
rules:
 - apiGroups: [""]
   resources:
    - nodes
    - nodes/proxy
    - services
    - endpoints
    - pods
   verbs: ["get", "list", "watch"]
 - apiGroups:
    - extensions
   resources:
    - ingresses
   verbs: ["get", "list", "watch"]
 - nonResourceURLs: ["/metrics"]
   verbs: ["get"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prometheus
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus
subjects:
 - kind: ServiceAccount
   name: prometheus
   namespace: {{ default_ns.name }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: etc-prometheus
  namespace: {{ default_ns.name }}
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
    scrape_configs:
     - job_name: "kubernetes-kubelet"
       scheme: https
       tls_config:
         ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
         insecure_skip_verify: true
       bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
       kubernetes_sd_configs:
        - role: node
       relabel_configs:
        - action: labelmap
          regex: __meta_kubernetes_node_label_(.+)
        - target_label: __address__
          replacement: kubernetes.default.svc.cluster.local:443
        - source_labels: [__meta_kubernetes_node_name]
          regex: (.+)
          target_label: __metrics_path__
          replacement: /api/v1/nodes/${1}/proxy/metrics
     - job_name: "kubernetes-cadvisor"
       scheme: https
       tls_config:
         ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
         insecure_skip_verify: true
       bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
       kubernetes_sd_configs:
        - role: node
       relabel_configs:
        - action: labelmap
          regex: __meta_kubernetes_node_label_(.+)
        - target_label: __address__
          replacement: kubernetes.default.svc.cluster.local:443
        - source_labels: [__meta_kubernetes_node_name]
          regex: (.+)
          target_label: __metrics_path__
          replacement: /api/v1/nodes/${1}/proxy/metrics/cadvisor
     - job_name: "kubernetes-apiservers"
       scheme: https
       tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          insecure_skip_verify: true
       bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
       kubernetes_sd_configs:
        - api_server: null
          role: endpoints
          namespaces:
            names: []
       relabel_configs:
       - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
         separator: ;
         regex: default;kubernetes;https
         replacement: $1
         action: keep
     - job_name: "kubernetes-pods"
       scheme: https
       tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          insecure_skip_verify: true
       bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
       kubernetes_sd_configs:
        - role: pod
       relabel_configs:
       - source_labels: [__meta_kubernetes_pod_label_grafanak8sapp]
         action: keep
         regex: true
       - action: labelmap
         regex: __meta_kubernetes_pod_label_(.+)
       - source_labels: [__meta_kubernetes_namespace]
         action: replace
         target_label: kubernetes_namespace
       - source_labels: [__meta_kubernetes_pod_name]
         action: replace
         target_label: kubernetes_pod_name
     - job_name: "envoy-pods"
       scheme: http
       kubernetes_sd_configs:
        - role: pod
       metrics_path: /stats/prometheus
       relabel_configs:
       - source_labels: [__meta_kubernetes_pod_label_envoy]
         action: keep
         regex: true
       - action: labelmap
         regex: __meta_kubernetes_pod_label_(.+)
       - source_labels: [__meta_kubernetes_namespace]
         action: replace
         target_label: kubernetes_namespace
       - source_labels: [__meta_kubernetes_pod_name]
         action: replace
         target_label: kubernetes_pod_name
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    name: prometheus
  name: prometheus
  namespace: {{ default_ns.name }}
spec:
  serviceName: "prometheus"
  selector:
    matchLabels:
      app: prometheus
  replicas: 1
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      serviceAccountName: prometheus
{% if deploy %}
      priorityClassName: infrastructure
      nodeSelector:
        preemptible: "false"
{% else %}
      nodeSelector:
        preemptible: "true"
      tolerations:
       - key: preemptible
         value: "true"
       - key: "kubernetes.azure.com/scalesetpriority"
         value: "spot"
{% endif %}
      securityContext:
        fsGroup: 65534
      containers:
       - name: prometheus
         image: prom/prometheus:v2.46.0
         imagePullPolicy: Always
         command:
          - "/bin/prometheus"
          - "--config.file=/etc/prometheus/prometheus.yml"
          - "--storage.tsdb.path=/prometheus"
          - "--storage.tsdb.retention.time=15d"
          - "--web.console.libraries=/usr/share/prometheus/console_libraries"
          - "--web.console.templates=/usr/share/prometheus/consoles"
          - "--web.enable-lifecycle"
{% if deploy %}
          - "--web.external-url=https://prometheus.{{ global.domain }}/"
          - "--web.route-prefix=/"
{% else %}
          - "--web.external-url=https://internal.{{ global.domain }}/{{ default_ns.name }}/prometheus/"
          - "--web.route-prefix=/{{ default_ns.name }}/prometheus/"
{% endif %}
         ports:
          - containerPort: 9090
            protocol: TCP
         volumeMounts:
          - mountPath: "/etc/prometheus"
            name: etc-prometheus
          - mountPath: "/prometheus"
            name: prometheus-storage
         resources:
           requests:
{% if deploy %}
             cpu: "50m"
             memory: 4G
{% else %}
             cpu: "20m"
             memory: "0.75G"
{% endif %}
           limits:
             cpu: "1"
             memory: 10G
       - name: envoy
         image: "{{ global.docker_prefix }}/envoyproxy/envoy:v1.22.3"
         command:
           - /usr/local/bin/envoy
           - --config-path
           - /etc/envoy/envoy.yaml
           - --concurrency
           - "2"
         resources:
           requests:
             cpu: "5m"
             memory: "20M"
           limits:
             cpu: "1"
             memory: "1G"
         ports:
          - containerPort: 443
         volumeMounts:
          - name: ssl-config-prometheus
            mountPath: /ssl-config
            readOnly: true
          - name: prometheus-envoy-sidecar-config
            mountPath: /etc/envoy
            readOnly: true
         readinessProbe:
           tcpSocket:
             port: 8443
           initialDelaySeconds: 5
           periodSeconds: 5
      volumes:
       - name: etc-prometheus
         configMap:
           name: etc-prometheus
       - name: ssl-config-prometheus
         secret:
           optional: false
           secretName: ssl-config-prometheus
       - name: prometheus-envoy-sidecar-config
         configMap:
           name: prometheus-envoy-sidecar-config
  volumeClaimTemplates:
    - metadata:
        name: prometheus-storage
        namespace: {{ default_ns.name }}
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 150Gi
---
apiVersion: v1
kind: Service
metadata:
  name: prometheus
spec:
  ports:
   - port: 443
     protocol: TCP
     targetPort: 8443
  selector:
    app: prometheus
