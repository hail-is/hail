//| mill-version: 1.0.3
//| mill-jvm-version: 11
//| mvnDeps:
//| - com.goyeau::mill-scalafix::0.6.0

package build

import com.goyeau.mill.scalafix.ScalafixModule
import mill.*
import mill.api.{Result, BuildCtx}
import mill.javalib.UnresolvedPath
import mill.scalalib.*
import mill.scalalib.Assembly.*
import mill.scalalib.TestModule.TestNg
import mill.scalalib.scalafmt.ScalafmtModule
import mill.util.{Jvm, VcsVersion}

object Settings {
  val hailMajorMinorVersion = "0.2"
  val hailPatchVersion = "135"
}

object Deps {
  object HTTPComponents {
    val core = mvn"org.apache.httpcomponents:httpcore:4.4.14"
    val client = mvn"org.apache.httpcomponents:httpclient:4.5.13"
  }

  object Asm {
    val version: String = "7.3.1"
    val core = mvn"org.ow2.asm:asm:$version"
    val analysis = mvn"org.ow2.asm:asm-analysis:$version"
    val util = mvn"org.ow2.asm:asm-util:$version"
  }

  object Breeze {
    // WARNING WARNING WARNING
    // Before changing the breeze version review:
    // - https://hail.zulipchat.com/#narrow/stream/123011-Hail-Query-Dev/topic/new.20spark.20ndarray.20failures/near/41645
    // - https://github.com/hail-is/hail/pull/11555
    val core = mvn"org.scalanlp::breeze:1.1"
    val natives = mvn"org.scalanlp::breeze-natives:1.1"
  }

  object Commons {
    val io = mvn"commons-io:commons-io:2.11.0"
    val lang3 = mvn"org.apache.commons:commons-lang3:3.12.0"
    val codec = mvn"commons-codec:commons-codec:1.15"
  }

  object Spark {
    def core: Task[Dep] = Task.Anon(mvn"org.apache.spark::spark-core:${build.env.sparkVersion()}")
    def mllib: Task[Dep] = Task.Anon(mvn"org.apache.spark::spark-mllib:${build.env.sparkVersion()}")
  }

  val samtools = mvn"com.github.samtools:htsjdk:3.0.5"
  val jdistlib = mvn"net.sourceforge.jdistlib:jdistlib:0.4.5"
  val freemarker = mvn"org.freemarker:freemarker:2.3.31"
  val elasticsearch = mvn"org.elasticsearch::elasticsearch-spark-30:8.4.3"
  val gcloud = mvn"com.google.cloud:google-cloud-storage:2.30.1"
  val jna = mvn"net.java.dev.jna:jna:5.13.0"
  val json4s = mvn"org.json4s::json4s-jackson:3.7.0-M11"
  val zstd = mvn"com.github.luben:zstd-jni:1.5.5-11"
  val lz4 = mvn"org.lz4:lz4-java:1.8.0"
  val netlib = mvn"com.github.fommil.netlib:all:1.1.2"
  val avro = mvn"org.apache.avro:avro:1.11.2"
  val junixsocket = mvn"com.kohlschutter.junixsocket:junixsocket-core:2.6.1"
  val log4jApi = mvn"org.apache.logging.log4j:log4j-api:2.20.0"
  val sfl4jNop = mvn"org.slf4j:slf4j-nop:1.7.36"
  val hadoopClient = mvn"org.apache.hadoop:hadoop-client:3.3.4"
  val jackson = mvn"com.fasterxml.jackson.core:jackson-core:2.15.2"
  val sourcecode = mvn"com.lihaoyi::sourcecode:0.4.2"

  object Plugins {
    val betterModadicFor = mvn"com.olegpy::better-monadic-for:0.3.1"
  }
}

object env extends Module {
  def scalaVersion: T[String] = Task.Input {
    val v = Task.env.getOrElse("SCALA_VERSION", "2.12.20")
    if (!v.startsWith("2.12"))
      Result.Failure("Hail currently supports only Scala 2.12")
    else
      v
  }

  def javaVersion: T[String] = Task.Input {
    System.getProperty("java.version")
  }

  def sparkVersion: T[String] = Task.Input {
    Result.Success(Task.env.getOrElse("SPARK_VERSION", "3.5.0"))
  }

  def getDebugMode(env: Map[String, String]): Boolean =
    !env.contains("HAIL_RELEASE_MODE")

  def debugMode: T[Boolean] = Task.Input {
    val isDebug = getDebugMode(Task.env)
    Task.log.info(s"Building in ${if (isDebug) "debug" else "release"} mode")
    isDebug
  }

  def debugOrRelease: Task[String] = Task.Anon {
    if (debugMode()) "debug" else "release"
  }
}

trait HailModule extends ScalaModule with ScalafmtModule with ScalafixModule { outer =>
  override def scalaVersion: T[String] = build.env.scalaVersion()

  override def javacOptions: T[Seq[String]] = Seq(
    "-Xlint:all",
    "-Werror",
    if (build.env.debugMode()) "-g" else "-O",
  ) ++ (if (!build.env.javaVersion().startsWith("1.8")) Seq("-Xlint:-processing") else Seq())

  override def scalacOptions: T[Seq[String]] = Task {
    Seq(
      "-explaintypes",
      "-unchecked",
      "-Xsource:2.13",
      "-Xno-patmat-analysis",
      "-Ypartial-unification",
      "-Yno-adapted-args", // will be removed in 2.13
      "-Ywarn-value-discard",
      "-Xlint",
      "-Ywarn-unused:_,-explicits,-implicits",
      "-Wconf:msg=legacy-binding:s",
      "-feature",
    ) ++ (
      if (build.env.debugMode()) Seq()
      else Seq(
        "-Xfatal-warnings",
        "-opt:l:method",
        "-opt:-closure-invocations",
      )
    )
  }

  trait HailTests extends ScalaTests with TestNg with ScalafmtModule with ScalafixModule {
    override def forkArgs: T[Seq[String]] = Seq("-Xss4m", "-Xmx4096M")

    override def mvnDeps: T[Seq[Dep]] =
      super.mvnDeps() ++ outer.compileMvnDeps() ++ Seq(
        mvn"org.scalacheck::scalacheck:1.18.1",
        mvn"org.scalatest::scalatest:3.2.19",
        mvn"org.scalatest::scalatest-shouldmatchers:3.2.19",
        mvn"org.scalatestplus::scalacheck-1-18:3.2.19.0",
        mvn"org.scalatestplus::testng-7-10:3.2.19.0",
        mvn"org.mockito::mockito-scala:1.17.31",
      )
  }
}

object hail extends HailModule { outer =>

  def buildInfo: T[PathRef] = Task {
    val revision = VcsVersion.vcsState().currentRevision
    os.write(
      Task.dest / "build-info.properties",
      s"""[Build Metadata]
         |revision=$revision
         |sparkVersion=${env.sparkVersion()}
         |hailPipVersion=${Settings.hailMajorMinorVersion}.${Settings.hailPatchVersion}
         |hailBuildConfiguration=${env.debugOrRelease()}
         |""".stripMargin,
    )
    PathRef(Task.dest)
  }

  override def moduleDeps: Seq[JavaModule] = Seq(memory)

  override def compileModuleDeps: Seq[JavaModule] =
    Seq(macros)

  override def resources: T[Seq[PathRef]] = super.resources() ++ Seq(
    BuildCtx.withFilesystemCheckerDisabled {
      PathRef(BuildCtx.workspaceRoot / "prebuilt" / "lib")
    },
    buildInfo(),
  )

  override def generatedSources: T[Seq[PathRef]] = Task {
    Seq(`ir-gen`.generate())
  }

  override def unmanagedClasspath: T[Seq[PathRef]] =
    Seq(shadedazure.assembly())

  // omit unmanagedClasspath from the jar
  override def jar: T[PathRef] = Task {
    val jar = Task.dest / "out.jar"
    Jvm.createJar(jar, (resources() ++ Seq(compile().classes)).map(_.path).filter(os.exists), manifest())
    PathRef(jar)
  }

  override def mvnDeps: T[Seq[Dep]] = Seq(
    Deps.HTTPComponents.core,
    Deps.HTTPComponents.client,
    Deps.Asm.core,
    Deps.Asm.analysis,
    Deps.Asm.util,
    Deps.samtools.excludeOrg("*"),
    Deps.jdistlib.excludeOrg("*"),
    Deps.freemarker,
    Deps.elasticsearch.excludeOrg("org.apache.spark"),
    Deps.gcloud.excludeOrg("com.fasterxml.jackson.core"),
    Deps.jna,
    Deps.json4s.excludeOrg("com.fasterxml.jackson.core"),
    Deps.zstd,
    Deps.sourcecode,
  )

  override def runMvnDeps: T[Seq[Dep]] = Seq(
    Deps.Breeze.natives.excludeOrg("org.apache.commons.math3"),
    Deps.Commons.io,
    Deps.Commons.lang3,
    Deps.Commons.codec,
    Deps.lz4,
    Deps.netlib,
    Deps.avro.excludeOrg("com.fasterxml.jackson.core"),
    Deps.junixsocket,
    Deps.sfl4jNop,
  )

  override def compileMvnDeps: T[Seq[Dep]] = Seq(
    Deps.log4jApi,
    Deps.hadoopClient,
    Deps.Spark.core().excludeOrg("org.scalanlp"),  // Hail has an explicit dependency on Breeze 1.1
    Deps.Spark.mllib().excludeOrg("org.scalanlp"),  // Hail has an explicit dependency on Breeze 1.1
    Deps.Breeze.core,
    Deps.jackson,
  )

  override def assemblyRules: Seq[Rule] = super.assemblyRules ++ Seq(
    Rule.Exclude("META-INF/INDEX.LIST"),
    Rule.ExcludePattern("scala/.*"),
    Rule.AppendPattern("META-INF/services/.*", "\n"),
    Rule.Relocate("breeze.**", "is.hail.relocated.@0"),
    Rule.Relocate("com.google.cloud.**", "is.hail.relocated.@0"),
    Rule.Relocate("com.google.common.**", "is.hail.relocated.@0"),
    Rule.Relocate("org.apache.commons.io.**", "is.hail.relocated.@0"),
    Rule.Relocate("org.apache.commons.lang3.**", "is.hail.relocated.@0"),
    Rule.Relocate("org.apache.http.**", "is.hail.relocated.@0"),
    Rule.Relocate("org.elasticsearch.**", "is.hail.relocated.@0"),
    Rule.Relocate("org.json4s.**", "is.hail.relocated.@0"),
    Rule.Relocate("org.objectweb.**", "is.hail.relocated.@0"),
  )

  override def scalacPluginMvnDeps: T[Seq[Dep]] = Seq(
    Deps.Plugins.betterModadicFor
  )

  def writeRunClasspath: T[PathRef] = Task {
    os.write(
      Task.dest / "runClasspath",
      runClasspath().map(_.path).mkString(":"),
    )
    PathRef(Task.dest)
  }

  object `ir-gen` extends HailModule with DefaultTaskModule {
    override def defaultTask(): String = "generate"

    override def mvnDeps = Seq(
      mvn"com.lihaoyi::mainargs:0.6.2",
      mvn"com.lihaoyi::os-lib:0.10.7",
      mvn"com.lihaoyi::sourcecode:0.4.2",
    )

    def generate: T[PathRef] = Task {
      runner().run(Args("--path", Task.dest).value)
      PathRef(Task.dest)
    }
  }

  object memory extends JavaModule { // with CrossValue {
    override def zincIncrementalCompilation: T[Boolean] = false

    override def javacOptions: T[Seq[String]] =
      outer.javacOptions() ++ (
        if (env.javaVersion().startsWith("1.8")) Seq(
          "-XDenableSunApiLintControl",
          "-Xlint:-sunapi",
        )
        else Seq()
      )

    override def sources: T[Seq[PathRef]] = Task.Sources {
      val debugOrRelease = if (env.getDebugMode(Task.env)) "debug" else "release"
      os.sub / debugOrRelease / "src"
    }
  }

  object macros extends HailModule {
    override def compileMvnDeps: T[Seq[Dep]] = Seq(
      mvn"org.scala-lang:scala-reflect:${scalaVersion()}",
      mvn"orf.scala-lang:scala-compiler:${scalaVersion()}"
    )
  }

  object test extends HailTests {
    override def resources: T[Seq[PathRef]] = outer.resources() ++ super.resources()

    override def assemblyRules: Seq[Rule] = outer.assemblyRules ++ Seq(
      Rule.Relocate("org.codehaus.jackson.**", "is.hail.relocated.@0")
    )

    override def mvnDeps: T[Seq[Dep]] = super.mvnDeps() ++ Seq(
      Deps.jackson
    )

    override def compileModuleDeps: Seq[JavaModule] =
      super.compileModuleDeps ++ outer.compileModuleDeps
  }

  object shadedazure extends JavaModule {
    override def mvnDeps: T[Seq[Dep]] = Seq(
      mvn"com.azure:azure-storage-blob:12.22.0",
      mvn"com.azure:azure-core-http-netty:1.13.7",
      mvn"com.azure:azure-identity:1.8.3",
    )

    override def assemblyRules: Seq[Rule] = Seq(
      Rule.ExcludePattern("META-INF/*.RSA"),
      Rule.ExcludePattern("META-INF/*.SF"),
      Rule.ExcludePattern("META-INF/*.DSA"),
      Rule.Relocate("com.azure.**", "is.hail.shadedazure.@0"),
      Rule.Relocate("com.ctc.**", "is.hail.shadedazure.@0"),
      Rule.Relocate("com.fasterxml.**", "is.hail.shadedazure.@0"),
      Rule.Relocate("com.microsoft.**", "is.hail.shadedazure.@0"),
      Rule.Relocate("com.nimbusds.**", "is.hail.shadedazure.@0"),
      Rule.Relocate("com.sun.**", "is.hail.shadedazure.@0"),
      Rule.Relocate("io.netty.**", "is.hail.shadedazure.@0"),
      Rule.Relocate("is.hail.**", "is.hail.shadedazure.@0"),
      Rule.Relocate("net.jcip.**", "is.hail.shadedazure.@0"),
      Rule.Relocate("net.minidev.**", "is.hail.shadedazure.@0"),
      Rule.Relocate("org.apache.**", "is.hail.shadedazure.@0"),
      Rule.Relocate("org.codehaus.**", "is.hail.shadedazure.@0"),
      Rule.Relocate("org.objectweb.**", "is.hail.shadedazure.@0"),
      Rule.Relocate("org.reactivestreams.**", "is.hail.shadedazure.@0"),
      Rule.Relocate("org.slf4j.**", "is.hail.shadedazure.@0"),
      Rule.Relocate("reactor.adapter.**", "is.hail.shadedazure.@0"),
      Rule.Relocate("reactor.core.**", "is.hail.shadedazure.@0"),
      Rule.Relocate("reactor.netty.**", "is.hail.shadedazure.@0"),
      Rule.Relocate("reactor.util.**", "is.hail.shadedazure.@0"),
    )
  }

}
