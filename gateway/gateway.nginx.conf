server {
    listen 80 default_server;
    listen [::]:80 default_server;
    server_name _;

    location /.well-known/acme-challenge {
        proxy_pass http://letsencrypt;

        proxy_set_header Host $http_host;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Host $http_host;
        proxy_set_header X-Forwarded-Proto https;
    }

    location / {
        return 301 https://$host$request_uri;
    }
}

server {
    listen [::]:443 ssl default_server;
    listen 443 ssl default_server;
    server_name _;
    return 444;
}

server {
    server_name internal.{{ domain }};
    client_max_body_size 8m;

    location = /auth {
        internal;
        resolver kube-dns.kube-system.svc.cluster.local;
        proxy_pass https://auth/api/v1alpha/verify_dev_credentials;
        include /ssl-config/ssl-config-proxy.conf;
    }

    location ~ ^/([^/]+)/([^/]+) {
        set $namespace $1;
        set $service $2;

        auth_request /auth;

        resolver kube-dns.kube-system.svc.cluster.local;
        proxy_pass https://$service.$namespace.svc.cluster.local;

        proxy_set_header Host $service.internal;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Host $http_host;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Real-IP $remote_addr;

        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;

        # we do not verify namespaced services
        # include /ssl-config/ssl-config-proxy.conf
    }

    error_page 401 = @error401;

    location @error401 {
        return 302 https://auth.{{ domain }}/login?next=https://$http_host$request_uri;
    }

    listen [::]:443 ssl;
    listen 443 ssl;
    ssl_certificate /etc/letsencrypt/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/privkey.pem;
    include /etc/letsencrypt/options-ssl-nginx.conf;
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;
}

{% for service in subdomains %}
{% if service != 'ukbb-rg' %}
server {
    server_name {% if service == 'www' %}{{ domain }}{% endif %} {{ service }}.{{ domain }};
    client_max_body_size 8m;

    location / {
        resolver kube-dns.kube-system.svc.cluster.local;
        proxy_pass https://{{ service }}.default.svc.cluster.local;

        proxy_set_header Host $http_host;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Host $http_host;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Real-IP $remote_addr;

        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
        include /ssl-config/ssl-config-proxy.conf;
    }

    listen [::]:443 ssl;
    listen 443 ssl;
    ssl_certificate /etc/letsencrypt/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/privkey.pem;
    include /etc/letsencrypt/options-ssl-nginx.conf;
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;
}

{% endif %}
{% endfor %}

server {
    server_name ukbb-rg.{{ domain }};

    location /rg_browser {
        proxy_pass http://ukbb-rg-browser.ukbb-rg;
        proxy_set_header Host              $http_host;
        proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Host  $updated_host;
        proxy_set_header X-Forwarded-Proto $updated_scheme;
        proxy_set_header X-Real-IP         $http_x_real_ip;

        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
        proxy_read_timeout 20d;
        proxy_buffering off;
    }

    location / {
        proxy_pass http://ukbb-rg-static.ukbb-rg;
        proxy_set_header Host              $http_host;
        proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Host  $updated_host;
        proxy_set_header X-Forwarded-Proto $updated_scheme;
        proxy_set_header X-Real-IP         $http_x_real_ip;
    }

    listen 443 ssl;
    listen [::]:443 ssl;
    ssl_certificate /etc/letsencrypt/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/privkey.pem;
    include /etc/letsencrypt/options-ssl-nginx.conf;
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;
}
